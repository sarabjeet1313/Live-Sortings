{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","sort-visuals/modal.jsx","Nav_Footer/Footer.jsx","sort-visuals/sort-visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","arr","temp","bubbleSortHelper","getQuickSortAnimations","quickSort","low","high","partitionIndex","pivot","dummy","quickSortPartition","AboutModal","Modal","this","props","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","Button","onClick","onHide","Component","state","class","href","SortingVisualizer","updateSpeed_1","setState","ANIMATION_SPEED_IN_MS","updateSpeed_1_5","updateSpeed_2","bind","show","animation","resetArray","min","max","random","sort","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","barOneHeight","barTwoHeight","bubbleSort","mergeSort","console","log","Navbar","variant","bg","expand","sticky","Brand","Nav","className","Link","active","NavDropdown","title","Item","prepareBubbleSort","prepareQuickSort","prepareMergeSort","map","value","idx","key","block","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4714aac.chunk.js","sourcesContent":["// MERGE SORT begins ------------------------------------------------------------------------------\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n// MERGE SORT ends ------------------------------------------------------------------------------\n\n// BUBBLE SORT begins ---------------------------------------------------------------------------\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  // const auxiliaryArray = array.slice();\n  bubbleSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction bubbleSortHelper(arr, startIdx, endIdx, animations) {\n  for (let i = 0; i <= endIdx; i++) {\n    for (let j = 0; j <= endIdx - i - 1; j++) {\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n      if (arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        animations.push([j, j + 1]);\n      } else {\n        animations.push([-1, -1]); // to handle \"do not swap\" conditions\n      }\n    }\n  }\n}\n\n// BUBBLE SORT ends -----------------------------------------------------------------------------\n\n// QUICK SORT begins ----------------------------------------------------------------------------\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n\n  quickSort(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(arr, low, high, animations) {\n  if (low < high) {\n    let partitionIndex = quickSortPartition(arr, low, high, animations);\n\n    quickSort(arr, low, partitionIndex - 1, animations); // sorting the array left of partitionIndex\n    quickSort(arr, partitionIndex + 1, high, animations); // sorting the array right of partitionIndex\n  }\n}\n\nfunction quickSortPartition(arr, low, high, animations) {\n  let pivot = arr[high];\n\n  let j = low - 1;\n\n  for (let i = low; i <= high - 1; i++) {\n    animations.push([i, high]);\n    animations.push([i, high]);\n    if (arr[i] < pivot) {\n      j++;\n      animations.push([i, j]);\n      let dummy = arr[j];\n      arr[j] = arr[i];\n      arr[i] = dummy;\n    } else {\n      animations.push([-1, -1]);\n    }\n  }\n\n  animations.push([j + 1, high]);\n  animations.push([j + 1, high]);\n  let dummy = arr[j + 1];\n  arr[j + 1] = arr[high];\n  arr[high] = dummy;\n  animations.push([j + 1, high]);\n\n  return j + 1;\n}\n\n// QUICK SORT ends ------------------------------------------------------------------------------\n","import React, { Component } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nclass AboutModal extends Component {\n  render() {\n    return (\n      <>\n        <Modal\n          {...this.props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              Sorting Visualizer\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              A bar chart based Visualizer that can visualize the sorting\n              algorithms for you. It has the capability to visualize the\n              following famous sorting algorithms : 1. Bubble Sort 2. Merge Sort\n              3. Quick Sort In addition to it, the application has the\n              capability of increasing the visualizing speed by 1.5x and 2.0x.\n              Please help yourself and understand the sorting algorithms in an\n              entertaining way.\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={this.props.onHide}>Close</Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default AboutModal;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  state = {};\n  render() {\n    return (\n      <>\n        <footer class=\"page-footer font-small unique-color-dark pt-4\">\n          <div class=\"footer-copyright text-center py-3\">\n            © 2020 Copyright:\n            <a href=\"/\"> Sorting-Visualizer</a>\n          </div>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./sort-visualizer.css\";\nimport {\n  getMergeSortAnimations,\n  getBubbleSortAnimations,\n  getQuickSortAnimations,\n} from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport AboutModal from \"./modal\";\nimport Footer from \"../Nav_Footer/Footer\";\nimport { Navbar, Nav, NavDropdown, Button } from \"react-bootstrap\";\n\nconst NUMBER_BARS = 64;\nconst PRIMARY_COLOR = \"black\";\nconst SECONDARY_COLOR = \"red\";\n\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateSpeed_1 = this.updateSpeed_1.bind(this);\n    this.updateSpeed_1_5 = this.updateSpeed_1_5.bind(this);\n    this.updateSpeed_2 = this.updateSpeed_2.bind(this);\n\n    this.state = {\n      array: [],\n      ANIMATION_SPEED_IN_MS: 75,\n      show: false,\n      animation: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  updateSpeed_1 = () => {\n    this.setState({\n      ANIMATION_SPEED_IN_MS: this.state.ANIMATION_SPEED_IN_MS / 1,\n    });\n  };\n\n  updateSpeed_1_5 = () => {\n    this.setState({\n      ANIMATION_SPEED_IN_MS: this.state.ANIMATION_SPEED_IN_MS / 1.5,\n    });\n  };\n\n  updateSpeed_2 = () => {\n    this.setState({\n      ANIMATION_SPEED_IN_MS: this.state.ANIMATION_SPEED_IN_MS / 2,\n    });\n  };\n\n  resetArray() {\n    // const array = [15, 1, 6, 10, 29, 52];\n    const array = [];\n    for (let i = 0; i < NUMBER_BARS; i++) {\n      array.push(generateRandomValue(7, 670));\n    }\n    this.setState({ array });\n  }\n\n  prepareMergeSort() {\n    const array = [...this.state.array];\n    this.setState({\n      animations: getMergeSortAnimations(array),\n      sort: \"merge\",\n    });\n  }\n\n  mergeSort() {\n    const { animations } = this.state;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_IN_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.ANIMATION_SPEED_IN_MS);\n      }\n    }\n  }\n\n  prepareQuickSort() {\n    const array = [...this.state.array];\n    this.setState({\n      animations: getQuickSortAnimations(array),\n      sort: \"quick\",\n    });\n  }\n\n  quickSort() {\n    const { animations } = this.state;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        // console.log(barOneIdx, barTwoIdx);\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_IN_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          if (barTwoIdx !== -1 && barOneIdx !== -1) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const barOneHeight = `${barOneStyle.height}`;\n            const barTwoHeight = `${barTwoStyle.height}`;\n            barTwoStyle.height = barOneHeight;\n            barOneStyle.height = barTwoHeight;\n          }\n        }, i * this.state.ANIMATION_SPEED_IN_MS);\n      }\n    }\n  }\n\n  prepareBubbleSort() {\n    const array = [...this.state.array];\n    this.setState({\n      animations: getBubbleSortAnimations(array),\n      sort: \"bubble\",\n    });\n  }\n\n  bubbleSort() {\n    const { animations } = this.state;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        // console.log(barOneIdx, barTwoIdx);\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_IN_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          if (barTwoIdx !== -1 && barOneIdx !== -1) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const barOneHeight = `${barOneStyle.height}`;\n            const barTwoHeight = `${barTwoStyle.height}`;\n            barTwoStyle.height = barOneHeight;\n            barOneStyle.height = barTwoHeight;\n          }\n        }, i * this.state.ANIMATION_SPEED_IN_MS);\n      }\n    }\n  }\n\n  sort() {\n    switch (this.state.sort) {\n      case \"bubble\":\n        this.bubbleSort();\n        break;\n      case \"quick\":\n        this.quickSort();\n        break;\n      case \"merge\":\n        this.mergeSort();\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    console.log(\"Rendering visualizer\");\n    const { array } = this.state;\n    let hideModalShow = () => {\n      this.setState({ show: false });\n    };\n    return (\n      <div>\n        <Navbar variant=\"dark\" bg=\"primary\" expand=\"lg\" sticky=\"top\">\n          <Navbar.Brand href=\"/\">Sorting-Visualizer</Navbar.Brand>\n          <Nav className=\"ml-auto\">\n            <Nav.Link active href=\"/\">\n              Generate a new Array\n            </Nav.Link>\n            <NavDropdown title=\"Sorting Menu\" id=\"nav-dropdown\">\n              <NavDropdown.Item onClick={() => this.prepareBubbleSort()}>\n                Bubble Sort\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => this.prepareQuickSort()}>\n                Quick Sort\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => this.prepareMergeSort()}>\n                Merge Sort\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Speed Up\" id=\"nav-dropdown\">\n              <NavDropdown.Item onClick={this.updateSpeed_1}>\n                1.0x\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={this.updateSpeed_1_5}>\n                1.5x\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={this.updateSpeed_2}>\n                2.0x\n              </NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link active onClick={() => this.setState({ show: true })}>\n              {\" \"}\n              About{\" \"}\n            </Nav.Link>\n            <AboutModal show={this.state.show} onHide={hideModalShow} />\n          </Nav>\n        </Navbar>\n        <div className=\"array-container\">\n          <div className=\"array-container-bars\">\n            {array.map((value, idx) => (\n              <div\n                className=\"array-bar\"\n                key={idx}\n                style={{ height: `${value}px` }}\n              ></div>\n            ))}\n          </div>\n        </div>\n        <Button\n          variant=\"primary\"\n          className=\"container\"\n          size=\"lg\"\n          block\n          onClick={() => this.sort()}\n        >\n          Sort\n        </Button>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nfunction generateRandomValue(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./sort-visuals/sort-visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}